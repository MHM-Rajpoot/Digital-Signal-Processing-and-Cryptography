// aes_like_demo.cpp
// Educational AES-128 style implementation (SubBytes, ShiftRows, MixColumns, KeyExpansion).
// NOT for production. Use a vetted crypto library (OpenSSL, libsodium) in real systems.
//
// This implements AES-128 encrypt/decrypt on a single 16-byte block.

#include <bits/stdc++.h>
using namespace std;
using u8 = uint8_t;
using u32 = uint32_t;

static const u8 sbox[256] = {
  // 0     1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
  0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
  0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
  0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
  0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
  0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
  0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
  0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
  0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
  0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
  0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
  0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
  0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
  0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
  0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
  0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
  0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
};

static const u8 inv_sbox[256] = {
  0x52,0x09,0x6A,0xD5,0x30,0x36,0xA5,0x38,0xBF,0x40,0xA3,0x9E,0x81,0xF3,0xD7,0xFB,
  0x7C,0xE3,0x39,0x82,0x9B,0x2F,0xFF,0x87,0x34,0x8E,0x43,0x44,0xC4,0xDE,0xE9,0xCB,
  0x54,0x7B,0x94,0x32,0xA6,0xC2,0x23,0x3D,0xEE,0x4C,0x95,0x0B,0x42,0xFA,0xC3,0x4E,
  0x08,0x2E,0xA1,0x66,0x28,0xD9,0x24,0xB2,0x76,0x5B,0xA2,0x49,0x6D,0x8B,0xD1,0x25,
  0x72,0xF8,0xF6,0x64,0x86,0x68,0x98,0x16,0xD4,0xA4,0x5C,0xCC,0x5D,0x65,0xB6,0x92,
  0x6C,0x70,0x48,0x50,0xFD,0xED,0xB9,0xDA,0x5E,0x15,0x46,0x57,0xA7,0x8D,0x9D,0x84,
  0x90,0xD8,0xAB,0x00,0x8C,0xBC,0xD3,0x0A,0xF7,0xE4,0x58,0x05,0xB8,0xB3,0x45,0x06,
  0xD0,0x2C,0x1E,0x8F,0xCA,0x3F,0x0F,0x02,0xC1,0xAF,0xBD,0x03,0x01,0x13,0x8A,0x6B,
  0x3A,0x91,0x11,0x41,0x4F,0x67,0xDC,0xEA,0x97,0xF2,0xCF,0xCE,0xF0,0xB4,0xE6,0x73,
  0x96,0xAC,0x74,0x22,0xE7,0xAD,0x35,0x85,0xE2,0xF9,0x37,0xE8,0x1C,0x75,0xDF,0x6E,
  0x47,0xF1,0x1A,0x71,0x1D,0x29,0xC5,0x89,0x6F,0xB7,0x62,0x0E,0xAA,0x18,0xBE,0x1B,
  0xFC,0x56,0x3E,0x4B,0xC6,0xD2,0x79,0x20,0x9A,0xDB,0xC0,0xFE,0x78,0xCD,0x5A,0xF4,
  0x1F,0xDD,0xA8,0x33,0x88,0x07,0xC7,0x31,0xB1,0x12,0x10,0x59,0x27,0x80,0xEC,0x5F,
  0x60,0x51,0x7F,0xA9,0x19,0xB5,0x4A,0x0D,0x2D,0xE5,0x7A,0x9F,0x93,0xC9,0x9C,0xEF,
  0xA0,0xE0,0x3B,0x4D,0xAE,0x2A,0xF5,0xB0,0xC8,0xEB,0xBB,0x3C,0x83,0x53,0x99,0x61,
  0x17,0x2B,0x04,0x7E,0xBA,0x77,0xD6,0x26,0xE1,0x69,0x14,0x63,0x55,0x21,0x0C,0x7D
};

static const u8 Rcon[11] = {
    0x00, // unused 0
    0x01, 0x02, 0x04, 0x08,
    0x10, 0x20, 0x40, 0x80,
    0x1B, 0x36
};

// Helper: multiply by x (02) in GF(2^8)
inline u8 xtime(u8 x) {
    return (u8)((x << 1) ^ ((x & 0x80) ? 0x1B : 0x00));
}

// Multiply in GF(2^8)
u8 gf_mul(u8 a, u8 b) {
    u8 res = 0;
    while (b) {
        if (b & 1) res ^= a;
        a = xtime(a);
        b >>= 1;
    }
    return res;
}

// State representation: 4x4 bytes column-major (state[col][row])
struct AESState {
    u8 s[4][4];
    void load_from_block(const uint8_t block[16]) {
        // block is 16 bytes in natural order; AES uses column-major mapping
        for (int c = 0; c < 4; ++c)
            for (int r = 0; r < 4; ++r)
                s[c][r] = block[c*4 + r];
    }
    void write_to_block(uint8_t block[16]) const {
        for (int c = 0; c < 4; ++c)
            for (int r = 0; r < 4; ++r)
                block[c*4 + r] = s[c][r];
    }
};

// SubBytes (and inverse)
void SubBytes(AESState &st) {
    for (int c=0;c<4;++c) for (int r=0;r<4;++r) st.s[c][r] = sbox[st.s[c][r]];
}
void InvSubBytes(AESState &st) {
    for (int c=0;c<4;++c) for (int r=0;r<4;++r) st.s[c][r] = inv_sbox[st.s[c][r]];
}

// ShiftRows / InvShiftRows
void ShiftRows(AESState &st) {
    // row r is rotated left by r
    for (int r=1;r<4;++r) {
        u8 tmp[4];
        for (int c=0;c<4;++c) tmp[c] = st.s[c][r];
        for (int c=0;c<4;++c) st.s[c][r] = tmp[(c + r) % 4];
    }
}
void InvShiftRows(AESState &st) {
    for (int r=1;r<4;++r) {
        u8 tmp[4];
        for (int c=0;c<4;++c) tmp[c] = st.s[c][r];
        for (int c=0;c<4;++c) st.s[c][r] = tmp[(c - r + 4) % 4];
    }
}

// MixColumns / InvMixColumns (operate on each column)
void MixColumns(AESState &st) {
    for (int c=0;c<4;++c) {
        u8 a0 = st.s[c][0], a1 = st.s[c][1], a2 = st.s[c][2], a3 = st.s[c][3];
        u8 r0 = (u8)(gf_mul(0x02, a0) ^ gf_mul(0x03, a1) ^ a2 ^ a3);
        u8 r1 = (u8)(a0 ^ gf_mul(0x02, a1) ^ gf_mul(0x03, a2) ^ a3);
        u8 r2 = (u8)(a0 ^ a1 ^ gf_mul(0x02, a2) ^ gf_mul(0x03, a3));
        u8 r3 = (u8)(gf_mul(0x03, a0) ^ a1 ^ a2 ^ gf_mul(0x02, a3));
        st.s[c][0] = r0; st.s[c][1] = r1; st.s[c][2] = r2; st.s[c][3] = r3;
    }
}
void InvMixColumns(AESState &st) {
    for (int c=0;c<4;++c) {
        u8 a0 = st.s[c][0], a1 = st.s[c][1], a2 = st.s[c][2], a3 = st.s[c][3];
        u8 r0 = (u8)(gf_mul(0x0e,a0) ^ gf_mul(0x0b,a1) ^ gf_mul(0x0d,a2) ^ gf_mul(0x09,a3));
        u8 r1 = (u8)(gf_mul(0x09,a0) ^ gf_mul(0x0e,a1) ^ gf_mul(0x0b,a2) ^ gf_mul(0x0d,a3));
        u8 r2 = (u8)(gf_mul(0x0d,a0) ^ gf_mul(0x09,a1) ^ gf_mul(0x0e,a2) ^ gf_mul(0x0b,a3));
        u8 r3 = (u8)(gf_mul(0x0b,a0) ^ gf_mul(0x0d,a1) ^ gf_mul(0x09,a2) ^ gf_mul(0x0e,a3));
        st.s[c][0] = r0; st.s[c][1] = r1; st.s[c][2] = r2; st.s[c][3] = r3;
    }
}

// AddRoundKey: XOR round key (16 bytes) into state
void AddRoundKey(AESState &st, const u8 roundKey[16]) {
    for (int c=0;c<4;++c) for (int r=0;r<4;++r) st.s[c][r] ^= roundKey[c*4 + r];
}

// Key expansion for AES-128: input 16-byte key -> 11 round keys (0..10), each 16 bytes
void KeyExpansion(const u8 key[16], u8 roundKeys[11][16]) {
    // Copy initial key as round 0
    for (int i=0;i<16;++i) roundKeys[0][i] = key[i];

    u8 temp[4];
    for (int round = 1; round <= 10; ++round) {
        // previous 4 bytes (last word)
        for (int i=0;i<4;++i) temp[i] = roundKeys[round-1][12 + i];

        // RotWord + SubWord + Rcon on temp
        // RotWord
        u8 t = temp[0];
        temp[0] = temp[1]; temp[1] = temp[2]; temp[2] = temp[3]; temp[3] = t;
        // SubWord
        for (int i=0;i<4;++i) temp[i] = sbox[temp[i]];
        // Rcon
        temp[0] ^= Rcon[round];

        // first word = prev_round_word0 XOR temp
        for (int i = 0; i < 4; ++i) roundKeys[round][i] = roundKeys[round-1][i] ^ temp[i];
        // remaining words
        for (int word = 1; word < 4; ++word) {
            for (int i = 0; i < 4; ++i) {
                roundKeys[round][word*4 + i] = roundKeys[round-1][word*4 + i] ^ roundKeys[round][(word-1)*4 + i];
            }
        }
    }
}

// AES-128 encryption of single 16-byte block
void AES_Encrypt_Block(const u8 in[16], u8 out[16], const u8 roundKeys[11][16]) {
    AESState st;
    st.load_from_block(in);

    AddRoundKey(st, roundKeys[0]);

    for (int round = 1; round <= 9; ++round) {
        SubBytes(st);
        ShiftRows(st);
        MixColumns(st);
        AddRoundKey(st, roundKeys[round]);
    }
    // Final round (no MixColumns)
    SubBytes(st);
    ShiftRows(st);
    AddRoundKey(st, roundKeys[10]);

    st.write_to_block(out);
}

// AES-128 decryption of single 16-byte block
void AES_Decrypt_Block(const u8 in[16], u8 out[16], const u8 roundKeys[11][16]) {
    AESState st;
    st.load_from_block(in);

    AddRoundKey(st, roundKeys[10]);
    InvShiftRows(st);
    InvSubBytes(st);

    for (int round = 9; round >= 1; --round) {
        AddRoundKey(st, roundKeys[round]);
        InvMixColumns(st);
        InvShiftRows(st);
        InvSubBytes(st);
    }
    AddRoundKey(st, roundKeys[0]);

    st.write_to_block(out);
}

// Helpers for printing
string hex_of_bytes(const u8 *b, size_t n) {
    static const char *hex = "0123456789ABCDEF";
    string s; s.reserve(n*2);
    for (size_t i=0;i<n;++i) {
        s.push_back(hex[b[i] >> 4]);
        s.push_back(hex[b[i] & 0xF]);
    }
    return s;
}

int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);

    cout << "AES-128-style demo (educational)\n\n";

    // Example 16-byte key and plaintext (values from AES test vectors)
    u8 key[16] = {
        0x2b,0x7e,0x15,0x16,
        0x28,0xae,0xd2,0xa6,
        0xab,0xf7,0x15,0x88,
        0x09,0xcf,0x4f,0x3c
    };
    u8 plaintext[16] = {
        0x32,0x43,0xf6,0xa8,
        0x88,0x5a,0x30,0x8d,
        0x31,0x31,0x98,0xa2,
        0xe0,0x37,0x07,0x34
    };

    cout << "Key       : " << hex_of_bytes(key, 16) << "\n";
    cout << "Plaintext : " << hex_of_bytes(plaintext, 16) << "\n";

    u8 roundKeys[11][16];
    KeyExpansion(key, roundKeys);

    // show round 0 and round 10 keys (optional)
    cout << "Round 0 key:  " << hex_of_bytes(roundKeys[0], 16) << "\n";
    cout << "Round 10 key: " << hex_of_bytes(roundKeys[10], 16) << "\n";

    u8 ciphertext[16];
    AES_Encrypt_Block(plaintext, ciphertext, roundKeys);
    cout << "Ciphertext : " << hex_of_bytes(ciphertext, 16) << "\n";

    u8 recovered[16];
    AES_Decrypt_Block(ciphertext, recovered, roundKeys);
    cout << "Decrypted  : " << hex_of_bytes(recovered, 16) << "\n";

    bool ok = memcmp(plaintext, recovered, 16) == 0;
    cout << "\nRound-trip OK? " << (ok ? "YES" : "NO") << "\n";

    // Small demonstration: show ShiftRows / MixColumns effects on a known block
    cout << "\nSmall internal step demo (SubBytes -> ShiftRows -> MixColumns) on plaintext:\n";
    AESState st; st.load_from_block(plaintext);
    cout << "Initial block: " << hex_of_bytes(plaintext, 16) << "\n";
    SubBytes(st);
    u8 tmp[16]; st.write_to_block(tmp);
    cout << "After SubBytes: " << hex_of_bytes(tmp, 16) << "\n";
    ShiftRows(st);
    st.write_to_block(tmp);
    cout << "After ShiftRows: " << hex_of_bytes(tmp, 16) << "\n";
    MixColumns(st);
    st.write_to_block(tmp);
    cout << "After MixColumns: " << hex_of_bytes(tmp, 16) << "\n";

    cout << "\nNote: This code implements AES-128 rounds (S-box, ShiftRows, MixColumns, AddRoundKey)\n";
    cout << "      and the standard key expansion for 128-bit key. It's educational only.\n";

    return 0;
}
